CDNs - Ontent Delivery Network

To use react in script tag without installing

use two CDN links - 
1. First consists of pure React core 
2. Second link is the React DOM 

Two files cannot be merged because react works on many other platfoms including mobile platforms as well, that why two different files.

--------------------------------------------------------------------------------------------------------------------------------
Episode 2 - Igniting our App

HTML,CSS and JS code is not ready to push to production,
so we need to optimize it.

Minify, bundle files, compress files, optimize the images 

How?
- Code Splitting, Chunking, Bundling, Image optimization, Remove the console logs, Minify the code, compress etc, and a lot more.



--------------------------------------------------------------------------------------------------------------------------------

What to read - Blogs, articles?
- Keys indexes in react
- File & Folder structure in react?
- Search React Fibre - github(acdlite)

---------------------------------------------------------------------------------------------------------------------------------

package.json is a configuration for NPM
NPM is a package manager which manages the versions of packages and stores in package.json.

pacakge-lock.json - keepsa record of every exact versionthat is being installed.

Vite, parcel and webpack are a bundler which bundles the code or app or packages the app and ships it to production.

CRA uses babel and webpack.

Two types of dependencies -
-D - Dev Dependencies - required in development phase
normal dependencies - used in production 

"^" or "~" in package.json before versions
^ means update both minor- and patch-level updates are allowed, but not major updates - This allows versions >=1.2.3 but <2.0.0.
~ means it will update to all future patch version - major version - This allows versions >=1.2.3 but <1.3.0.

Transitive dependencies -
when every other pacakage is dependent on other packages.
---------------------------------------------------------------------------------------------------------------------------------

**************************
to install use NPM
to execute package use NPX
**************************

---------------------------------------------------------------------------------------------------------------------------------
- How react code is executed behind the scenes?

React element is an object.

React.createElement is not a HTML element. When we render the React object on to the DOM then it becomes a HTML element.

React.createElement creates a react element which is at the end of the day is an JS object => which when rendered on DOM creates a HTML element
or React.createElement creates an object nd when it is rendered over the DOM it becomes HTML element.

---------------------------------------------------------------------------------------------------------------------------------
- How JSX is different?
JSX is separate from React, its not a part of React.
JSX is not HTML in JS, its a HTML like Syntax only.

JSx is JSX - its a dfferent syntax.

---------------------------------------------------------------------------------------------------------------------------------
JS engine does not understant react or jsx code, it only understant ES6 syntax.
---------------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------------
- How the react code is converted into JS?
JSX => JS using BABEL
React code is transpiled before it reaches the JS Engine and PARCEL is 
transpiling(converted into browser understamdable code) and using BABEL to do this.

JSX code is transpiled into JS using BABEL and is converted into React.createElement => ReactElement-JS Object => HTML Element(render)  
JSX will prevent Cross side scripting and it sanitizes the data automatically.

---------------------------------------------------------------------------------------------------------------------------------
- BABEL?
BABEL is a transpiler.
It is a JS Compiler.



---------------------------------------------------------------------------------------------------------------------------------
- Components
Class based components - OLD
Functional Component - NEW - A piece of function returning some jsx is fucntional component.

- Component Composition
Writing a component inside another component.

root.render converts the componenet into html element.

---------------------------------------------------------------------------------------------------------------------------------
Episode 4

how to plan a front end project
- A layout, ui
-Decide Components
  - Header
    - Logo
    - Nav Items
  - Body
    - Search
    - RestaurantContainer
      - RestaurantCard
  - Footer
    - Copyright
    - Links
    - Address
    - Contact


---------------------------------------------------------------------------------------------------------------------------------/
Props?
passing props is like passing argumments to a function.
When data has to be passed dyamically to another component, we use props.

- destructuring
const RestaurantCard = (props) =>{
    const {resName, cuisine} = props;

    console.log(props.resName);
    console.log(props.cuisine);
}

- destructuring on the fly
const RestaurantCard = ({resName, cuisine}) =>{

    console.log(resName);
    console.log(cuisine);
}



---------------------------------------------------------------------------------------------------------------------------------
config driven UI - when you open a swiggy webApp, website is driven by config means controlling the ui using the data, 
so the data is different for different places and different data for those palces we'll be gettign from the backend api.

The Api, the data is the config - an api data can be differnet for DElhi, for mumbai, for bangalore.

UI Layer + Data Layer = Front end App

---------------------------------------------------------------------------------------------------------------------------------
key prop on componenet?
- So, when a new component is added react does not know which new component is added nd to be rendered, so adding a key is must.
- with "key={id}" react knows the position of the component.
- DoNot use indexes as key!!

if there one more ui element added so reacct does not know at what place that element came, so react cleans the container and 
rerenders if no key prop is used, but if we use key prop then react knows and can uniquely identify the react elements, 
then it will only render the newly added element instead of rerendering all the previous elements, which slows the webpage.



---------------------------------------------------------------------------------------------------------------------------------
Episode 5:

two type of Imports/Exports?

In one file we can write only one default export not more than that.


export default Component_Name;
import Component_Name from "path";

export const Component_Name;
import {Component_Name} from "path";

The default export is used when you want to export a single value or function, and it's imported without curly braces.
Named exports are used when you want to export multiple values from the module, and they are imported with curly braces.


Fact about exports?
can we export same component with a named export and a default export?

-Why do this?
This approach allows the consumer of your module to choose how they want to import the component—either by default or by name.
It can be helpful if you want to provide a default export for convenience, while still making it possible for users to import it by name if needed.
-Caveat:
While this is valid JavaScript, it’s not a typical practice. Using both exports can make the code harder to maintain and potentially confuse developers as to which export should be used.
Generally, it’s best to pick one export style and stick with it for clarity.




---------------------------------------------------------------------------------------------------------------------------------
Note IMPORTANT: Whenever the UI changes or state variable changes react rerenders the component.

# React Hooks 
- Normal Javascript utility fxns which has some superpower given to us by react developers.

# useState() - Superpowerful state variable in react. Import using named import.
- 
 


IMPORTANTIMPORTANTIMPORTANTIMPORTANTIMPORTANTIMPORTANTIMPORTANTIMPORTANTIMPORTANT
Why React is Fast?

- Reconcilation Algorithm (React Fiber) in React16
Virtual DOM is a representation of Actual DOM. It is a normal JS object.
Virtula DOM is React element.

- Diff Algorithm
Finds out the difference between the updated virtual DOM and Actual DOM

React is doing efficient DOM manipulation coz it has Virtual DOM.

As soon as you call the setter function of usestate hook React will 
look for the difference b/w  both DOMs and update the UI that's why it is fast.

The second argument in useState hook - the setter fxn, it exist oz its kind of a trigger to start the diffing alogorithm.
---------------------------------------------------------------------------------------------------------------------------------
CORS - It is a mechanism which uses additional HTTP header which tells the browser whether a specific 
web app can share a resourse with another web app. 

Both the web app have to hve different origins.


--------------------------------------------------------------------------------------------------------------------------------------------
MONOLITH vs MICROSERVICE

Monolith -  

Microservices - It gave us separation of concern.
Single responsibility principle where each and every service has its own job.
(BackEnd, UI, Auth, Database, SMS Service)

Single service where each project has its own job to do.

How all services communicate with each other? 

Loads -> Render -> API -> Render

On different ports - different services can be deployed
then all these ports can be deployed onto a same domain name.

:1234 - UI - /
:1000 - BE - /api
:3000 - SMS - /SMS

How UI fetches data from the backend?
- When to make an API call?
Approach 1 - As soon as the page loads- make the API call and then when we get the data - render the UI
Approach 2 - As soon as the page loads - Render the UI whatever you have (skeleton)- Make the API call - Render the UI when you get the data.

Approach 2 gives better UX - React has one of the best render cycles - Always use Approach 2

# useEffect hook
- useEffect() - 

The logic of updating the UI is known as rerendering - which is the superpower of react.
- react is good at DOM manipulation which makes it faster.

- useEffect will be called when the component is rendered and it will quickly call the useEffect hook.
If you want to do something after the render use usEffect hook.

- If no dependency array => useEffect is called on every component render
- If empty dependency array => useEffect is called only on initial component render (just once)
- If dependency array is  [btnNameReact] => every time btnName React changes useEffect is called. 

fetch() - given by browser - to call API

eg - 
useEffect(() => {
  fetchData();

  return = () => {};
}, [])

const fetchData = async () =>{
  const data = await fetch("https://www.swiggy.com/mapi/restaurants/list/v5?offset=0&is-seo-homepage-enabled=true&lat=12.9628669&lng=77.57750899999999&carousel=true&third_party_vendor=1")
  const json = await data.json();
  
  // optional Chaining 
  setListOfRestaurants(json?.data?.cards[4]?.card?.card?.gridElements?.infoWithStyle?.restaurants)
  console.log(json);
  // console.log(json.data.cards[4].card.card.gridElements.infoWithStyle.restaurants);
}

# SHimmer UI


Important question - since you cannot change a const variable, then how you are modifying the variable using setter method of useState.
eg.
const [btnName, setBtnName] = useState("Login");

- In the above statement "Login" is the variable name assigned to const btnName but when you call setBtnName("Logout") - It change s the variable name to "Logout"
- because when setBtnName is called the whole component is renderd again and btnName is a new variable at that time so the "Logout" variable is being assigned to the btnName.


- Whenever state variable updates, react triggers a reconcilation cycle (re-render the component)


# Routing in React

Do routing configuration
- import createBrowserRouter from 'react-router-dom'
- createBroeserRouter takes a list of paths
 eg. const appRouter = createBrowserRouter([
  {
    path: '/',
    element: <AppLayout />,
    children: [
      {
        path: '/',
        element: <Body />
      },
      {
        path: '/about',
        element: <About />
      }
    ],
    errorElement: <Error />

  },
])
- use Error Element- use Outlet from react-router

Two types of routing in web apps

- Client side routing
- server side routing


# class based component

Constructor - The constructor method is the first to be called when a component is created. It's where we typically initialize the component's state and bind event handlers.

Render - The render method is responsible for rendering the component's UI. It must return a React element (typically JSX) representing the component's structure.

ComponentDidMount - This method is called immediately after the component is inserted into the DOM. It's often used for making AJAX requests, setting up subscriptions, or other one-time initializations.

ComponentDidUpdate - This method is called after the component has been updated (re-rendered) due to changes in state or props. It's often used for side effects, like updating the DOM in response to state or prop changes.

ComponentWillUnmount - This method is called just before the component is removed from the DOM. It's used to clean up resources or perform any necessary cleanup.

# Props in class based components
- constructor(props) - we use super method and props as an argument in the constructor of the child class.
- When the class loads, a
- super(props) - It is used for: 

1. Access to parents class constructor - super(props) is used to invoke the constructor of the parent class, 
ensuring the parents class's initializations is performed before the child class constructor code is executed, 
to maintain inheritance chain correctly.

2. passing props to parents constructor - By writing this we ensure that the props object is correctly passed to the parents class constructor.
This is important because the parent class may need to set up its properties or handle the props somehow. By calling super(props), 
we make the props available for the parent class's constructor to work with.

3. When There are multiple children class components then the DidMount is not called in a serial manner. it will call the constructor and 
render of parent then the constructor & render of first child then the constructor & child of second class then the component DidMount
of first child then the didMount of second child class then the didMount of parent class.

- React optimizes the didMount of the child classes.

4. Refer to the lifestyle diagram - React has two phases - Render Phase and Commit Phase 

Constructor called - Render is called - DOM is updated - Component didMpunt is called (a single batch)

Render phase is fast and commit phasse is slow so react bathces the didMount phase (DOM or sideEffects) in the commit phase.

5. Diff is calculated - reconcilation happens - in a single batch DOM is updated during the componentDidMount phase.

6. componentWillUnmount - We need to clear somethings while leaving the page


# Episode 9 - Optimizong our App

- Single Responsibility Principle - Single component follows a single functionality.
- Mainatable, Reusable, Testable
- 


# Episode 10 - Data is the new Oil 

- HOC - Higher order Component 
- HOC are pure function or puer component coz we are not creating a new component, we are only using the exsiting component.
- Lifting the state up 
- Controlled and Uncontrolled componenet
- Props Drilling 
- React Context


# Episode 11 - Let's build our store

- Redux
  - Redux Dev Tools - easy debugging
  - slices in redux store - parts or slices in one big object
  - slice - small portion of a redux store
  - to keep data separate, we make slices (cart slice, user slice etc.)
  - you cannot update cart slice data - use DISPATCH and ACTION
  - DISPATCH - when you click on a add to cart button then it will dispatch an action and then that action will call a function
    which will modify the data inside the cart. addToCart->Dispatch->Action->Function()->modifies data
  - Function() is known as REDUCER

  - Read data from the cart - we will use SELECTOR
  - CART -> SELECTOR -> show it onto the UI
  - This is known as subscribing to the store  

 SETUP - 
 - Install @reduxjs/toolkit
 - Build our store
 - Connect our store to our app
 - slice (cartSlice)
 - dispatch(action)
 - Selector 